unit USale;

interface

uses UProductDescription, UMoney, UPayment, UDate, USalesLineItem,
  System.SysUtils, System.Generics.Defaults, System.Generics.Collections, System.Types;

type
  TSale = class
  private
    lineItems: TList<SalesLineItem>;
    date: TDate;
    isComplete: boolean;
    payment: Payment;
  public
    function getBalance(): Money;
    function getTotal(): Money;
    procedure becomeComplete();
    procedure makeLineItem(desc: ProductDescription; quantity: integer);
    procedure makePayment(cashTendered: Money);
    constructor Create();
  end;

implementation

{ Sale }

procedure TSale.becomeComplete;
begin
  isComplete := True;
end;

constructor TSale.Create;
begin
  date:=TDate.Create;
end;

function TSale.getBalance: Money;
begin
  result := payment.getAmount().minus(getTotal());
end;

function TSale.getTotal: Money;
var
  total, subtotal: Money;
  lineItem: SalesLineItem;
begin
  total := Money.Create(0);
  subtotal := Money.Create(0);
  for lineItem in lineItems do
  begin
    subtotal := lineItem.getSubtotal();
    total.add(subtotal);
  end;
  result := total;
end;

procedure TSale.makeLineItem(desc: ProductDescription; quantity: integer);
begin
  lineItems.add(SalesLineItem.Create(desc, quantity))
end;

procedure TSale.makePayment(cashTendered: Money);
begin
  payment := payment.Create(cashTendered);
end;

end.
